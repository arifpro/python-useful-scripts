import os
import time
from collections import defaultdict

# =======================
# Purpose of the Code:
# =======================
# This script recursively searches through a specified directory, starting from a given root directory (`/Users/arif`).
# It identifies all the `node_modules` directories found within the search path, excluding specified directories based on
# predefined categories (e.g., system/environment directories, and project-specific directories).
# The script groups and writes the found `node_modules` directories by their parent directories into an output file.
# It also prints the found paths to the terminal and reports the total number of `node_modules` directories found.
# Additionally, the script calculates and displays the total execution time.
#
# Author : Md Arif Hossain
# Email  : devarif.me@gmail.com
# GitHub : https://github.com/arifpro
# Project: https://github.com/arifpro/python-useful-scripts
# Date   : 17 November 2024, Sunday
# Version: 1.0
# License: Apache License
#
# =======================

# Record the start time
start_time = time.time()

# Define the directory to start the search from
search_dir = "/Users/arif"

# Define categories of directories to exclude
exclude_categories = {
    # System or environment directories to exclude
    "default": [
        ".nvm",  # Example: Node Version Manager
        ".bun",  # Example: Bun (JavaScript runtime)
        ".npm",  # Example: NPM configuration
        ".config/yarn",  # Example: Yarn configuration
        ".vscode",  # Example: Visual Studio Code settings
        ".vscode-insiders",  # Example: Visual Studio Code Insiders settings
        ".sonarlint",  # Example: SonarLint settings
        "node_modules",  # Example: Global node_modules
        "Library",  # Example: macOS Library directory
    ],
    # Project-specific directories to exclude
    "project": [
        "Desktop/payroll-web-second",  # Example: Project-specific directory
    ],
}

# Initialize a counter for the total number of 'node_modules' found
node_modules_count = 0

# Dictionary to hold grouped results: key is the parent directory, value is a list of node_modules found in it
grouped_results = defaultdict(list)

# Generate the full paths for the directories to exclude, based on categories
exclude_full_paths = [
    os.path.join(search_dir, path)
    for paths in exclude_categories.values()
    for path in paths
]

# Optional: explicitly delete the file before writing if it exists, ensuring it's cleared first
if os.path.exists("grouped_node_modules.txt"):
    os.remove("grouped_node_modules.txt")

# Open the output file in write mode (it will be overwritten every time we open it)
with open("grouped_node_modules.txt", "w") as f:
    # Walk through the directory tree
    for root, dirs, files in os.walk(search_dir):
        # Skip directories that are in the exclude_full_paths list
        if any(root.startswith(exclude_path) for exclude_path in exclude_full_paths):
            continue

        # Skip directories that are inside a node_modules directory (avoid nested node_modules)
        if "node_modules" in root.split(os.sep):
            continue

        # Check if the current directory has 'node_modules' and save the path
        if "node_modules" in dirs:
            # Increment the counter
            node_modules_count += 1
            # Full path of the node_modules directory
            node_modules_path = os.path.join(root, "node_modules")
            # Get the parent directory (the folder containing 'node_modules')
            parent_dir = root

            # Store the node_modules directory under its parent directory
            grouped_results[parent_dir].append(node_modules_path)

            # Write the parent folder and its node_modules immediately to the file
            f.write(f"Parent Folder: {parent_dir}\n")
            f.write(f"  - {node_modules_path}\n")
            f.write("\n")

            # Optionally, print the found path and the current count
            print(f"Found: {node_modules_path} (Total found: {node_modules_count})")

# Record the end time
end_time = time.time()

# Calculate the total execution time
execution_time = end_time - start_time

# Final message after the search completes
print(
    f"\nSearch complete. A total of {node_modules_count} 'node_modules' directories were found."
)
print(f"Execution Time: {execution_time:.2f} seconds")
