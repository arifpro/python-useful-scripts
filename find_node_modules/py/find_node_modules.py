import os
import time
from collections import defaultdict

# =======================
# Purpose of the Code:
# =======================
# This script recursively searches through a specified directory, starting from a given root directory (`/Users/arif`).
# It identifies all the `node_modules` directories found within the search path, excluding specified directories based on
# predefined categories (e.g., system/environment directories, and project-specific directories).
# The script groups and writes the found `node_modules` directories by their parent directories into an output file.
# It also prints the found paths to the terminal and reports the total number of `node_modules` directories found.
# Additionally, the script calculates and displays the total execution time.
#
# Author : Md Arif Hossain
# Email  : devarif.me@gmail.com
# GitHub : https://github.com/arifpro
# Project: https://github.com/arifpro/python-useful-scripts
# Date   : 17 November 2024, Sunday
# Version: 1.1
# License: Apache License
#
# =======================

# Record the start time
start_time = time.time()

# Define the directory to start the search from
search_dir = "/Users/arif"

# Define categories of directories to exclude
exclude_categories = {
    # System or environment directories to exclude
    "default": [
        ".nvm",  # Example: Node Version Manager
        ".bun",  # Example: Bun (JavaScript runtime)
        ".npm",  # Example: NPM configuration
        ".config/yarn",  # Example: Yarn configuration
        ".vscode",  # Example: Visual Studio Code settings
        ".vscode-insiders",  # Example: Visual Studio Code Insiders settings
        ".sonarlint",  # Example: SonarLint settings
        "node_modules",  # Example: Global node_modules
        "Library",  # Example: macOS Library directory
    ],
    # Running projects directories to exclude
    "project": [
        "Desktop/payroll-web-second",
        "Documents/GitHub/payroll-web",
        "Documents/GitHub/wind-platform",
        "Documents/GitHub/wind-web-v2",
        "Documents/GitHub/ihrhelden-server",
        "Documents/GitHub/ihrhelden-admin",
        "Documents/GitHub/ihrhelden-web",
    ],
}

# Initialize a counter for the total number of 'node_modules' found
node_modules_count = 0

# Dictionary to hold grouped results: key is the common parent directory, value is a list of node_modules found
grouped_results = defaultdict(list)

# Generate the full paths for the directories to exclude, based on categories
exclude_full_paths = [
    os.path.abspath(os.path.join(search_dir, path))
    for paths in exclude_categories.values()
    for path in paths
]

# Helper function to check if a directory or its parent is in the excluded list
def is_excluded(path):
    abs_path = os.path.abspath(path)
    return any(abs_path.startswith(exclude_path) for exclude_path in exclude_full_paths)

# Helper function to find the common ancestor
def get_common_parent(path):
    parts = path.split(os.sep)
    # Adjust the depth here if necessary to group by specific parent levels
    if len(parts) > 3:
        return os.sep.join(parts[:4])  # For example, group by the first 4 levels
    return os.sep.join(parts[:3])

# Walk through the directory tree
for root, dirs, files in os.walk(search_dir):
    # Skip excluded directories and their subdirectories
    if is_excluded(root):
        continue

    # Skip directories that are inside a node_modules directory (avoid nested node_modules)
    if "node_modules" in root.split(os.sep):
        continue

    # Check if the current directory has 'node_modules' and save the path
    if "node_modules" in dirs:
        # Increment the counter
        node_modules_count += 1
        # Full path of the node_modules directory
        node_modules_path = os.path.join(root, "node_modules")

        # Determine the common parent directory
        common_parent = get_common_parent(node_modules_path)

        # Group node_modules directories under their common parent
        grouped_results[common_parent].append(node_modules_path)

# Write grouped results to the output file and print them
with open("grouped_node_modules.txt", "w") as f:
    for parent, paths in grouped_results.items():
        f.write(f"Parent Folder: {parent}\n")
        print(f"Parent Folder: {parent}")
        for path in paths:
            f.write(f"  - {path}\n")
            print(f"  - {path}")
        f.write("\n")
        print()

# Record the end time
end_time = time.time()

# Calculate the total execution time
execution_time = end_time - start_time

# Final message after the search completes
print(
    f"\nSearch complete. A total of {node_modules_count} 'node_modules' directories were found."
)
print(f"Execution Time: {execution_time:.2f} seconds")
