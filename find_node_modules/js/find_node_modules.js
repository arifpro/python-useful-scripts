// =======================
// Purpose of the Code:
// =======================
// This script recursively searches through a specified directory, starting from a given root directory (`/Users/arif`).
// It identifies all the `node_modules` directories found within the search path, excluding specified directories based on
// predefined categories (e.g., system/environment directories, and project-specific directories).
// The script groups and writes the found `node_modules` directories by their parent directories into an output file.
// It also prints the found paths to the terminal and reports the total number of `node_modules` directories found.
// Additionally, the script calculates and displays the total execution time.
//
// Author : Md Arif Hossain
// Email  : devarif.me@gmail.com
// GitHub : https://github.com/arifpro
// Project: https://github.com/arifpro/python-useful-scripts
// Date   : 19 November 2024, Sunday
// Version: 1.0
// License: Apache License
//
// =======================

const fs = require("fs");
const path = require("path");
const time = require("performance-now");

// Record the start time
const startTime = time();

// Define the directory to start the search from
const searchDir = "/Users/arif";

// Define categories of directories to exclude
const excludeCategories = {
  // System or environment directories to exclude
  default: [
    ".nvm", // Example: Node Version Manager
    ".bun", // Example: Bun (JavaScript runtime)
    ".npm", // Example: NPM configuration
    ".config/yarn", // Example: Yarn configuration
    ".vscode", // Example: Visual Studio Code settings
    ".vscode-insiders", // Example: Visual Studio Code Insiders settings
    ".sonarlint", // Example: SonarLint settings
    "node_modules", // Example: Global node_modules
    "Library", // Example: macOS Library directory
    ".Trash", // Example: macOS Trash directory
  ],
  // Running projects directories to exclude
  project: [
    "Desktop/payroll-web-second",
    "Documents/GitHub/payroll-web",
    "Documents/GitHub/wind-platform",
    "Documents/GitHub/wind-web-v2",
    "Documents/GitHub/ihrhelden-server",
    "Documents/GitHub/ihrhelden-admin",
    "Documents/GitHub/ihrhelden-web",
  ],
};

// Initialize a counter for the total number of 'node_modules' found
let nodeModulesCount = 0;

// Dictionary to hold grouped results: key is the common parent directory, value is a list of node_modules found
const groupedResults = {};

// Generate the full paths for the directories to exclude, based on categories
const excludeFullPaths = [
  ...excludeCategories.default.map((dir) => path.resolve(searchDir, dir)),
  ...excludeCategories.project.map((dir) => path.resolve(searchDir, dir)),
];

// Helper function to check if a directory or its parent is in the excluded list
function isExcluded(pth) {
  const absPath = path.resolve(pth);
  return excludeFullPaths.some((excludePath) =>
    absPath.startsWith(excludePath)
  );
}

// Helper function to find the common ancestor
function getCommonParent(pth) {
  const parts = pth.split(path.sep);
  return parts.slice(0, 4).join(path.sep); // Group by first 4 levels of the path
}

// Walk through the directory tree
function walkDirectory(root) {
  let dirs = [];
  try {
    dirs = fs.readdirSync(root, { withFileTypes: true });
  } catch (error) {
    if (error.code === "EPERM") {
      console.warn(`Permission denied: ${root}. Skipping.`);
    } else {
      console.error(`Error reading directory ${root}: ${error.message}`);
    }
    return; // Skip this directory on error
  }

  dirs.forEach((entry) => {
    const entryPath = path.join(root, entry.name);

    // Skip excluded directories and their subdirectories
    if (isExcluded(entryPath)) {
      return;
    }

    // Skip directories that are inside a node_modules directory (avoid nested node_modules)
    if (
      entry.isDirectory() &&
      entry.name === "node_modules" &&
      root.includes("node_modules")
    ) {
      return;
    }

    // If it's a node_modules directory, process it
    if (entry.isDirectory() && entry.name === "node_modules") {
      nodeModulesCount += 1;
      const commonParent = getCommonParent(entryPath);

      // Group node_modules directories under their common parent
      if (!groupedResults[commonParent]) {
        groupedResults[commonParent] = [];
      }
      groupedResults[commonParent].push(entryPath);
    }

    // Recurse into subdirectories
    if (entry.isDirectory()) {
      walkDirectory(entryPath);
    }
  });
}

// Start scanning
walkDirectory(searchDir);

// Write grouped results to the output file and print them
const pwd = process.cwd();
// const outputFile = "./grouped_node_modules_js.txt";
// const outputFile = path.join(pwd, "grouped_node_modules_js.txt");
let outputFile = path.join(pwd, "grouped_node_modules_js.txt");
console.log(`Writing results to: ${pwd}`);

if (!pwd.includes("js")) {
  outputFile = path.join(pwd, "js", "grouped_node_modules_js.txt");

  if (!pwd.includes("find_node_modules")) {
    outputFile = path.join(pwd, "find_node_modules", "js", "grouped_node_modules_js.txt");
  }
}

const outputStream = fs.createWriteStream(outputFile);
for (const parent in groupedResults) {
  outputStream.write(`Parent Folder: ${parent}\n`);
  console.log(`Parent Folder: ${parent}`);
  groupedResults[parent].forEach((path) => {
    outputStream.write(`  - ${path}\n`);
    console.log(`  - ${path}`);
  });
  outputStream.write("\n");
  console.log();
}

outputStream.end();

// Record the end time
const endTime = time();

// Calculate the total execution time
const executionTime = ((endTime - startTime) / 1000).toFixed(2);

// Final message after the search completes
console.log(
  `\nSearch complete. A total of ${nodeModulesCount} 'node_modules' directories were found.`
);
console.log(`Execution Time: ${executionTime} seconds`);
